// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
}

model Workflow {
  id          String  @id @default(cuid())
  userId      String
  name        String
  description String?

  definition    String
  executionPlan String?
  creditsCost   Int     @default(0)

  cron String?

  status String

  lastRunAt     DateTime?
  lastRunId     String?
  lastRunStatus String?
  nextRunAt     DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  excecutions WorkflowExecution[]

  //User cannot have two workflows with the same name
  @@unique([userId, name])
}

model WorkflowExecution {
  id          String    @id @default(cuid())
  workflowId  String
  userId      String
  status      String
  trigger     String
  createdAt   DateTime  @default(now())
  startedAt   DateTime?
  completedAt DateTime?
  definition  String    @default("{}")

  creditsConsumed Int @default(0)

  phases ExecutionPhase[]

  workflow Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)
}

model ExecutionPhase {
  id                  String    @id @default(cuid())
  userId              String
  status              String
  number              Int
  node                String
  name                String
  startedAt           DateTime?
  completedAt         DateTime?
  inputs              String?
  outputs             String?
  creditsConsumed     Int?
  workflowExecutionId String

  execution WorkflowExecution @relation(fields: [workflowExecutionId], references: [id], onDelete: Cascade)
  log       ExecutionLog[]
}

model ExecutionLog {
  id        String   @id @default(cuid())
  logLevel  String
  message   String
  timestamp DateTime @default(now())

  executionFlowId String
  executionPhase  ExecutionPhase @relation(fields: [executionFlowId], references: [id], onDelete: Cascade)
}

model UserBalance {
  userId  String @id
  credits Int    @default(0)
}

model Credential {
  id     String @id @default(cuid())
  userId String
  name   String
  value  String

  createdAt DateTime @default(now())

  //User cannot have two credentials with the same name
  @@unique([userId, name])
}

model UserPurchase {
  id        String   @id @default(cuid())
  userId    String
  stripeId  String
  description String
  amount   Int
  currency  String
  date      DateTime @default(now())
}